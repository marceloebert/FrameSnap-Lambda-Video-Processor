  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test
    environment: SONAR
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Fallback coverage file (if not present)
        run: |
          if ! find coverage -name "coverage.opencover.xml" | grep -q .; then
            echo "Arquivo de cobertura não encontrado. Criando mock vazio para SonarCloud não quebrar."
            mkdir -p coverage
            echo '<?xml version="1.0"?><coverage></coverage>' > coverage/coverage.opencover.xml
          fi

      - name: Install SonarCloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:$HOME/.dotnet/tools"

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"marceloebert_FrameSnap-Lambda-Video-Processor" \
            /o:"marceloebert" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.branch.name=main \
            /d:sonar.cs.opencover.reportsPaths="coverage/**/coverage.opencover.xml" \
            /d:sonar.sources=. \
            /d:sonar.verbose=true

      - name: Restore and build main project
        run: |
          dotnet restore Lambda-FrameSnap-Processor.csproj
          dotnet build Lambda-FrameSnap-Processor.csproj --no-incremental

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
