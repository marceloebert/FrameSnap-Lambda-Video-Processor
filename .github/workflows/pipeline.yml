name: Build and Deploy Lambda

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  REGION_DEFAULT: us-east-1
  SONAR_PROJECT_KEY: marceloebert_FrameSnap-Lambda-Video-Processor
  SONAR_ORGANIZATION: marceloebert
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Install dependencies
        run: dotnet restore Lambda-FrameSnap-Processor.sln

      - name: Run Unit Tests with Coverage
        run: |
          dotnet test Lambda-FrameSnap-Processor.Tests/Lambda-FrameSnap-Processor.Tests.csproj \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=./coverage/coverage.opencover.xml \
            /p:Include="[Lambda-FrameSnap-Processor]*" \
            --verbosity normal

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: Lambda-FrameSnap-Processor.Tests/coverage/coverage.opencover.xml

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test
    environment: SONAR
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarCloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global coverlet.console

      - name: Begin SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /o:"${{ env.SONAR_ORGANIZATION }}" \
            /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="coverage/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**Tests*.cs" \
            /d:sonar.scm.provider=git \
            /d:sonar.sourceEncoding=UTF-8 \
            /d:sonar.sources=. \
            /d:sonar.exclusions="**/bin/**/*,**/obj/**/*" \
            /d:sonar.branch.name="${{ github.ref_name }}"

      - name: Build solution
        run: |
          dotnet restore Lambda-FrameSnap-Processor.sln
          dotnet build Lambda-FrameSnap-Processor.sln --configuration Release --no-restore

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build-and-package:
    runs-on: ubuntu-latest
    needs: code-analysis
    environment:
      name: AWS
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Install Amazon Lambda Tools
        run: |
          dotnet tool install -g Amazon.Lambda.Tools
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Build and package Lambda
        run: |
          dotnet restore
          dotnet lambda package -pl . -c Release -o Lambda-FrameSnap-Processor.zip

      - name: Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: Lambda-FrameSnap-Processor.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-package
    environment:
      name: AWS
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package

      - name: Deploy Lambda to AWS
        run: |
          aws lambda update-function-code \
            --region us-east-1 \
            --function-name Lambda-FrameSnap-Processor \
            --zip-file fileb://Lambda-FrameSnap-Processor.zip
